---
name: prog
externs:
  name: externs
  externs:
  - name: extern
    ret_type: int
    globid: printf
    decls:
      name: tdecls
      tdecls:
      - name: tdecl
        type: char*
  - name: extern
    ret_type: int
    globid: arg
    decls:
      name: tdecls
      tdecls:
      - name: tdecl
        type: int
  - name: extern
    ret_type: float
    globid: argf
    decls:
      name: tdecls
      tdecls:
      - name: tdecl
        type: int
funcs:
  name: funcs
  funcs:
  - name: func
    ret_type: float
    globid: test1
    decls:
      name: vdecls
      vdecls:
      - name: vdecl
        type: noalias ref float
        var: $a
      - name: vdecl
        type: noalias ref float
        var: $b
      - name: vdecl
        type: float
        var: $c
    blk:
      name: blk
      contents:
        name: stmts
        stmts:
        - name: vardeclstmt
          vdecl:
            name: vdecl
            type: int
            var: $x
          exp:
            name: lit
            type: int
            value: 0
        - name: vardeclstmt
          vdecl:
            name: vdecl
            type: int
            var: $xy
          exp:
            name: lit
            type: int
            value: 1
        - name: vardeclstmt
          vdecl:
            name: vdecl
            type: int
            var: $xyz
          exp:
            name: lit
            type: int
            value: 2
        - name: while
          cond:
            name: binop
            type: bool
            op: '>'
            lhs:
              name: varval
              type: int
              var: $xyz
            rhs:
              name: lit
              type: int
              value: 8
          stmt:
            name: blk
            contents:
              name: stmts
              stmts:
              - name: expstmt
                exp:
                  name: assign
                  type: int
                  var: $x
                  exp:
                    name: caststmt
                    type: int
                    exp:
                      name: binop
                      type: float
                      op: '-'
                      lhs:
                        name: binop
                        type: float
                        op: +
                        lhs:
                          name: varval
                          type: float
                          var: $a
                        rhs:
                          name: varval
                          type: float
                          var: $b
                      rhs:
                        name: binop
                        type: float
                        op: '*'
                        lhs:
                          name: binop
                          type: float
                          op: /
                          lhs:
                            name: varval
                            type: float
                            var: $c
                          rhs:
                            name: varval
                            type: float
                            var: $a
                        rhs:
                          name: varval
                          type: float
                          var: $b
              - name: if
                cond:
                  name: binop
                  type: bool
                  op: ==
                  lhs:
                    name: varval
                    type: float
                    var: $a
                  rhs:
                    name: varval
                    type: float
                    var: $b
                stmt:
                  name: expstmt
                  exp:
                    name: assign
                    type: int
                    var: $xy
                    exp:
                      name: caststmt
                      type: int
                      exp:
                        name: lit
                        type: int
                        value: 1
                else_stmt:
                  name: expstmt
                  exp:
                    name: assign
                    type: int
                    var: $xy
                    exp:
                      name: lit
                      type: int
                      value: 0
              - name: if
                cond:
                  name: binop
                  type: bool
                  op: '||'
                  lhs:
                    name: binop
                    type: bool
                    op: '&&'
                    lhs:
                      name: binop
                      type: bool
                      op: '>'
                      lhs:
                        name: varval
                        type: int
                        var: $xyz
                      rhs:
                        name: uop
                        type: int
                        op: '-'
                        exp:
                          name: varval
                          type: int
                          var: $xy
                    rhs:
                      name: binop
                      type: bool
                      op: <
                      lhs:
                        name: varval
                        type: float
                        var: $a
                      rhs:
                        name: varval
                        type: float
                        var: $b
                  rhs:
                    name: binop
                    type: bool
                    op: '||'
                    lhs:
                      name: binop
                      type: bool
                      op: ==
                      lhs:
                        name: varval
                        type: float
                        var: $c
                      rhs:
                        name: varval
                        type: float
                        var: $a
                    rhs:
                      name: binop
                      type: bool
                      op: ==
                      lhs:
                        name: varval
                        type: int
                        var: $x
                      rhs:
                        name: lit
                        type: int
                        value: 0
                stmt:
                  name: blk
                  contents:
                    name: stmts
                    stmts:
                    - name: ret
                      exp:
                        name: varval
                        type: float
                        var: $a
                else_stmt:
                  name: blk
                  contents:
                    name: stmts
                    stmts:
                    - name: expstmt
                      exp:
                        name: assign
                        type: float
                        var: $a
                        exp:
                          name: flit
                          type: float
                          value: 8.5
              - name: expstmt
                exp:
                  name: assign
                  type: float
                  var: $b
                  exp:
                    name: flit
                    type: float
                    value: 7.2
        - name: ret
          exp:
            name: varval
            type: float
            var: $c
  - name: func
    ret_type: int
    globid: run
    decls: null
    blk:
      name: blk
      contents:
        name: stmts
        stmts:
        - name: vardeclstmt
          vdecl:
            name: vdecl
            type: float
            var: $a
          exp:
            name: funccall
            type: float
            globid: argf
            params:
              name: exps
              exps:
              - name: lit
                type: int
                value: 0
        - name: vardeclstmt
          vdecl:
            name: vdecl
            type: float
            var: $b
          exp:
            name: funccall
            type: float
            globid: argf
            params:
              name: exps
              exps:
              - name: lit
                type: int
                value: 1
        - name: vardeclstmt
          vdecl:
            name: vdecl
            type: float
            var: $c
          exp:
            name: funccall
            type: float
            globid: argf
            params:
              name: exps
              exps:
              - name: lit
                type: int
                value: 2
        - name: printslit
          string: "initial:\n\0"
        - name: print
          exp:
            name: varval
            type: float
            var: $a
        - name: print
          exp:
            name: varval
            type: float
            var: $b
        - name: print
          exp:
            name: varval
            type: float
            var: $c
        - name: expstmt
          exp:
            name: funccall
            type: float
            globid: test1
            params:
              name: exps
              exps:
              - name: varval
                type: float
                var: $a
              - name: varval
                type: float
                var: $b
              - name: varval
                type: float
                var: $c
        - name: printslit
          string: "final:\n\0"
        - name: print
          exp:
            name: varval
            type: float
            var: $a
        - name: print
          exp:
            name: varval
            type: float
            var: $b
        - name: print
          exp:
            name: varval
            type: float
            var: $c
        - name: ret
          exp:
            name: lit
            type: int
            value: 0
...
