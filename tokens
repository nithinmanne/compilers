# Just For Reference, Not Used in Code

EXTERN = extern
LPAREN = (
RPAREN = )
SEMICOLON = ;
DEF = def
LBRACE = {
RBRACE = }
EQUALS = =
RETURN = return
WHILE = while
IF = if
ELSE = else
PRINT = print
COMMA = ,
LBRACK = [
RBRACK = ]
TIMES = *
DIVIDE = /
PLUS = +
MINUS = -
EQUAL = ==
LESS = <
GREATER = >
BITAND = &&
BITOR = ||
BITNOT = !
BITTRUE = true
BITFALSE = false
NUMBER = [0-9]+(\.[0-9]+)?
STRING = "[^"\n\r]*"
NAME = [a-zA-Z_]+[a-zA-Z0-9_]*
DOLLAR = $
TYPEINT = int
TYPECINT = cint
TYPEFLOAT = float
TYPEBOOL = bool
TYPEVOID = void
TYPENOALIAS = noalias
TYPEREF = ref
COMMENTHASH = #

As Part of NAME:
NAME, EXTERN, DEF, RETURN, WHILE, IF, ELSE, PRINT, TRUE, FALSE, TYPEINT, TYPECINT, TYPEFLOAT, TYPEBOOL, TYPEVOID, TYPENOALIAS, TYPEREF

SYMBOLS:
LPAREN, RPAREN, SEMICOLON, LBRACE, RBRACE, EQUALS, COMMA, LBRACK, RBRACK, TIMES, DIVIDE, PLUS, MINUS, EQUAL, LESS, GREATER, BITAND, BITOR, BITNOT, DOLLAR, COMMENTHASH

REMAINING:
NUMBER
STRING

SPECIAL:
IGNORE
COMMENTS

GRAMMER from DOC:

<prog>      ::= <extern>* <func>+

<extern>    ::=  extern <type> <globid> "(" <tdecls>? ")" ";"

<func>      ::= def <type> <globid> "(" <vdecls>? ")" <blk>
<blk>       ::= "{" <stmts>? "}"
<stmts>     ::= <stmt>+

<stmt>      ::= <blk>
              | return <exp>? ";"
              | <vdecl> "=" <exp> ";"
              | <exp> ";"
              | while "(" <exp> ")" <stmt>
              | if "(" <exp> ")" <stmt> (else <stmt>)?
              | print <exp> ";"
              | print <slit> ";"

<exps>      ::= <exp> | <exp> "," <exps>
<exp>       ::= "(" <exp> ")"
              | <binop>
              | <uop>
              | <lit>
              | <varid>
              | <globid> "(" <exps>? ")"

<binop>     ::= <arith-ops>
              | <logic-ops>
              | <varid> = <exp>         # assignment
              | "[" <type> "]" <exp>    # explicit type-cast

<arith-ops> ::= <exp> * <exp>
              | <exp> / <exp>
              | <exp> + <exp>
              | <exp> - <exp>

<logic-ops> ::= <exp> == <exp>    # equality
              | <exp> < <exp>
              | <exp> > <exp>
              | <exp> && <exp>    # bitwise AND only for bools
              | <exp> || <exp>    # bitwise OR only for bools




<uop>       ::= ! <exp>          # bitwise negation on bools
              | - <exp>          # signed negation


<lit>     ::= true
            | false
            | [0-9]+(\.[0-9]+)?

<slit>    ::= "[^"\n\r]*"

<ident>   ::= [a-zA-Z_]+[a-zA-Z0-9_]*
<varid>   ::= $<ident>         # no space between $ and <ident>.
<globid>  ::= <ident>
<type>    ::= int | cint | float | bool | void | (noalias)? ref <type>
<vdecls>  ::= <vdecl> | <vdecl> "," <vdecls>
<tdecls>  ::= <type> | <type> "," <tdecls>
<vdecl>   ::= <type> <varid>
